<!DOCTYPE html>
<html lang="en-us"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <meta property="og:description" content="">

        <meta property="og:image" content="">

        <meta property="og:title" content="Lecture 3 - CS50">

        <meta property="og:url" content="">

        <link href="https://cs50.harvard.edu/college/2018/fall/favicon.ico?1560129098" rel="icon">

        <!-- https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use -->
        <link crossorigin="anonymous" href="Lecture%203%20-%20CS50_files/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" rel="stylesheet">

        <link href="Lecture%203%20-%20CS50_files/style.css" rel="stylesheet">

        <!-- http://getbootstrap.com/docs/4.3/getting-started/introduction/ -->
        <script crossorigin="anonymous" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" src="Lecture%203%20-%20CS50_files/jquery-3.js"></script>
        <script crossorigin="anonymous" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" src="Lecture%203%20-%20CS50_files/popper.js"></script>
        <script crossorigin="anonymous" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" src="Lecture%203%20-%20CS50_files/bootstrap.js"></script>

        <script>

            $(document).on('DOMContentLoaded', function() {

                // Get headings
                let $headings = $([
                    'main.markdown-body h2',
                    'main.markdown-body h3',
                    'main.markdown-body h4',
                    'main.markdown-body h5',
                    'main.markdown-body h6'].join(','));

                // Add anchors to headings
                $headings.each(function(index, element) {
                    if ($(element).attr('id') && $(element).has('a').length === 0) {
                        $(element).wrapInner($('<a data-id href="#' + $(element).attr('id') + '"></a>'));
                    }
                });

                // For each iframe
                $('iframe').each(function(index, element) {

                    // Ensure responsive in Safari on iOS (for, e.g., Google Calendars), per https://stackoverflow.com/a/23083463/5156190
                    if (!$(this).attr('scrolling')) {
                        $(this).attr('scrolling', 'no');
                    }

                    // If an embedded YouTube video
                    let matches = $(this).attr('src').match(/^https:\/\/www.youtube.com\/embed\/([A-Za-z0-9_-]+)/);
                    if (matches) {

                        // Add allowfullscreen if not present
                        if ($(this).attr('allowfullscreen') === undefined) {
                            $(this).attr('allowfullscreen', '');
                        }

                        // Add modifier classes if not present, assuming 16x9 by default
                        if (!$(this).hasClass('embed-responsive-item')) {
                            $(this).addClass('embed-responsive-item');
                            $(this).wrap('<div class="embed-responsive embed-responsive-16by9"></div>');
                        }

                        // Add background image for printing
                        // https://stackoverflow.com/a/2068371/5156190
                        if ($(this).css('background-image') === 'none') {
                            $(this).css('background-image', 'url("https://img.youtube.com/vi/' + matches[1] + '/sddefault.jpg")');
                            $(this).css('background-repeat', 'no-repeat');
                            $(this).css('background-size', 'cover');
                        }
                    }
                });

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    let last = $headings.last();
                    if (last.length) {

                        // On small devices
                        if ($('aside').position().top < $('main').position().top) {
                            var margin = $(window).height() - ($('main').outerHeight() + $('aside').outerHeight() - last.offset().top);
                        }

                        // On large devices
                        else {
                            var margin = $(window).height() - ($('main').outerHeight() - last.offset().top);
                        }

                        // Update margin
                        $('main').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                    }
                });
                $(window).trigger('resize');

            });

        </script>

        <title>Lecture 3 - CS50</title>

    </head>

    <body>

        <div class="container-fluid">

            <div class="row">

                <aside class="col-md">
 
                    <header><h1 data-id="this-was-cs50"><a href="https://cs50.harvard.edu/college/2018/fall/">This was CS50</a></h1>

<p>Harvard University<br>
Fall 2018</p></header>

                    <button aria-controls="nav" aria-expanded="false" class="btn btn-sm collapsed d-md-none" data-target="aside &gt; nav" data-toggle="collapse">Menu</button>

                    <nav class="collapse d-md-block"><!--
<div class="btn-group">
  <a class="btn btn-sm btn-outline-light" href="/college/2018/fall/weeks/10/" role="button">Week 10</a>
  <button aria-expanded="false" aria-haspopup="true" class="btn btn-sm btn-outline-light dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" type="button">
    <span class="sr-only">Toggle Dropdown</span>
  </button>
  <div class="dropdown-menu">
    <a class="dropdown-item" href="/college/2018/fall/weeks/10/" selected><strong>Week 10</strong></a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/8/">Week 8</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/7/">Week 7</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/6/">Week 6</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/5/">Week 5</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/4/">Week 4</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/3/">Week 3</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/2/">Week 2</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/1/">Week 1</a>
    <a class="dropdown-item" href="/college/2018/fall/weeks/0/">Week 0</a>
  </div>
</div>
-->

<hr>

<ul>
  <li><a href="https://cs50.io/">CS50 IDE</a></li>
  <li><a href="https://reference.cs50.net/">CS50 Reference</a></li>
  <li><a href="https://sandbox.cs50.io/">CS50 Sandbox</a></li>
</ul>

<hr>

<ul>
  <li><a href="https://cs50.harvard.edu/discourse">Discourse</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/guide.pdf">Resource Guide</a></li>
  <li><a href="https://cs50.statuspage.io/">Status Page</a></li>
  <li><a href="https://cs50.readthedocs.io/style/c/">Style Guide</a></li>
</ul>

<hr>

<ul>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/weeks"><strong>Curriculum</strong></a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/faqs">FAQs</a></li>
  <li><a href="https://docs.cs50.net/2018/fall/project/project.html">Final Project</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/hours">Office Hours</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/quiz">Quiz</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/sections">Sections</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/seminars">Seminars</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/staff">Staff</a></li>
  <li><a href="https://cs50.harvard.edu/college/2018/fall/syllabus">Syllabus</a></li>
</ul>

<hr>

<p style="font-size: initial">With <a href="https://cs50.harvard.edu/college/2018/fall/thanks">thanks</a> to CS50’s alumni and friends</p></nav>

                    <footer></footer>

                </aside>

                <main class="col-md markdown-body" style="margin-bottom: 254px;">

                    <h2 class="no_toc" id="lecture-3"><a data-id="" href="#lecture-3">Lecture 3</a></h2>

<ul id="markdown-toc">
  <li><a href="#enhance" id="markdown-toc-enhance">Enhance</a></li>
  <li><a href="#last-time" id="markdown-toc-last-time">Last time</a></li>
  <li><a href="#cs50-ide" id="markdown-toc-cs50-ide">CS50 IDE</a></li>
  <li><a href="#tools" id="markdown-toc-tools">Tools</a></li>
  <li><a href="#strings" id="markdown-toc-strings">Strings</a></li>
  <li><a href="#memory" id="markdown-toc-memory">Memory</a></li>
  <li><a href="#memory-layout" id="markdown-toc-memory-layout">Memory layout</a></li>
  <li><a href="#structs" id="markdown-toc-structs">Structs</a></li>
  <li><a href="#enhance-1" id="markdown-toc-enhance-1">Enhance?</a></li>
</ul>

<h2 id="enhance"><a data-id="" href="#enhance">Enhance</a></h2>

<ul>
  <li>We watch a clip, <a href="https://www.youtube.com/watch?v=i3gv2zOmJiA">CSI Zoom Enhance</a>,
 where the main characters zoom in further and further into an image, 
revealing more and more details. Today, we’ll see how that works (or 
doesn’t) in reality.</li>
</ul>

<h2 id="last-time"><a data-id="" href="#last-time">Last time</a></h2>

<ul>
  <li>We talked about the details of compiling, which is actually made of four steps:
    <ul>
      <li>First, our source code is <em>preprocessed</em>, so any header files like <code class="highlighter-rouge">stdio.h</code> that we include, are actually included.</li>
      <li>Then, our code is <em>compiled</em> into assembly code, instructions that our CPU can understand.</li>
      <li>Then, that assembly code is further <em>assembled</em> into the binary that match those assembly instructions.</li>
      <li>Finally, the compiled library files that we wanted to include, such as <code class="highlighter-rouge">cs50.c</code> or <code class="highlighter-rouge">printf.c</code>, are <em>linked</em>, or merged with our program.</li>
    </ul>
  </li>
  <li>We discovered some helpful tools:
    <ul>
      <li><code class="highlighter-rouge">help50</code>, which might help us understand error messages</li>
      <li><code class="highlighter-rouge">printf</code>, which can help us understand our program as it runs</li>
      <li><code class="highlighter-rouge">style50</code>, which checks the style of our code so it’s more readable and consistent</li>
    </ul>
  </li>
</ul>

<h2 id="cs50-ide"><a data-id="" href="#cs50-ide">CS50 IDE</a></h2>

<ul>
  <li>CS50 IDE is like the CS50 Sandbox, but with more features. It is 
an online development environment, with a code editor and a terminal 
window, but also tools for debugging and collaborating:<br>
<img src="Lecture%203%20-%20CS50_files/cs50_ide.png" alt="browser window with CS50 IDE, panel of files on left, code editor on top right, terminal window on bottom right"></li>
  <li>Once we log in, we’ll see a workspace that looks similar to that 
of CS50 Sandbox, but now our workspace will be saved to our account.</li>
  <li>We can create a new file with File &gt; New File (or the green plus sign), and use File &gt; Save to save it as <code class="highlighter-rouge">hello.c</code> in the folder <code class="highlighter-rouge">~/workspace/</code>. Now we’ll write our simple program:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>And we’ll need to manually save, with File &gt; Save or the keyboard shortcut.</li>
    </ul>
  </li>
  <li>Now, in the terminal window below, we can type <code class="highlighter-rouge">make hello</code> and <code class="highlighter-rouge">./hello</code> to see our program run.</li>
  <li>The folder icon at the top left will show us all our files in a directory (folder) called <code class="highlighter-rouge">~/workspace/</code>, and we can create folders and files inside. The <code class="highlighter-rouge">~</code> symbol refers to our home directory in this environment, which is just the set of all the files related to our account, and <code class="highlighter-rouge">workspace</code> is a folder inside <code class="highlighter-rouge">~</code> that we can use. (The <code class="highlighter-rouge">~</code> directory also has other configuration files for our account, but we won’t need to worry about them.)</li>
  <li>In the terminal, we see <code class="highlighter-rouge">~/workspace/ $ </code>. The <code class="highlighter-rouge">$ </code>
 part of the prompt is the same as before, after which we can type a 
command, but the first part of the prompt tells us the directory our 
terminal is in. For example, we can type <code class="highlighter-rouge">ls</code>, and we’ll see a textual version of the <code class="highlighter-rouge">workspace</code> directory. And <code class="highlighter-rouge">./hello</code> refers to a file called <code class="highlighter-rouge">hello</code> in <code class="highlighter-rouge">.</code>, which is the current folder.</li>
  <li>We can change our directory with <code class="highlighter-rouge">cd</code>, and if we type something like <code class="highlighter-rouge">cd src3</code> (assuming we have a folder already named <code class="highlighter-rouge">src3</code>), we’ll see our prompt change to <code class="highlighter-rouge">~/workspace/src3/ $ </code>.</li>
  <li>We can delete files and folders with the graphical file tree, 
right-clicking them as we might be familiar with already. But we can do 
the same in the command line, with <code class="highlighter-rouge">rm hello</code>, which will remove files. The command will ask us for a confirmation, and we can type <code class="highlighter-rouge">yes</code> or <code class="highlighter-rouge">y</code> (or <code class="highlighter-rouge">n</code>, if we’ve changed our minds).</li>
  <li>We can create directories with <code class="highlighter-rouge">mkdir test</code>, and <code class="highlighter-rouge">rmdir</code> to remove them.</li>
</ul>

<h2 id="tools"><a data-id="" href="#tools">Tools</a></h2>

<ul>
  <li>In the CS50 IDE, we’ve also added another tool, <code class="highlighter-rouge">check50</code>. Like <code class="highlighter-rouge">style50</code>, we wrote this tool to automatically check the correctness of your programs, by passing in inputs and looking at their outputs.</li>
  <li>After we write a program from a problem set, and have tested it ourselves with a few inputs, we can type <code class="highlighter-rouge">check50 cs50/2018/fall/hello</code>. The <code class="highlighter-rouge">cs50/2018/fall/hello</code> is an indicator for the program specification that <code class="highlighter-rouge">check50</code> should check, and once we run that command, we’ll see <code class="highlighter-rouge">check50</code> uploading our code and checking it.</li>
  <li>We can also now use a tool called a <em>debugger</em>, built into the CS50 IDE.</li>
  <li>After we compile our code, we can run <code class="highlighter-rouge">debug50 ./hello</code>, which will tell us to set a breakpoint first. A <em>breakpoint</em>
 indicates a line of code where the debugger should pause our program, 
until we choose to continue it. For example, we can click to the left of
 a line of our code, and a red circle will appear:<br>
<img src="Lecture%203%20-%20CS50_files/breakpoint.png" alt="code editor with red icon next to line 6 of code"></li>
  <li>Now, if we run <code class="highlighter-rouge">debug50 ./hello</code> again, we’ll see the debugger panel open on the right:<br>
<img src="Lecture%203%20-%20CS50_files/debugger_panel.png" alt="debugger panel with controls, variables"></li>
  <li>We see that the variable we made, <code class="highlighter-rouge">name</code>, is under the <code class="highlighter-rouge">Local Variables</code> section, and see that there’s a value of <code class="highlighter-rouge">0x0</code> (which is <code class="highlighter-rouge">null</code>), and a type of <code class="highlighter-rouge">string</code>, as we expected.</li>
  <li>Our breakpoint has paused our program <em>before</em> line 6, so 
to continue, we have a few controls in the debugger panel. The blue 
triangle will continue our program until we reach another breakpoint. 
The curved arrow to its right will “step over” the line, running it and 
pausing our program again immediately after. The arrow pointing downward
 will “step into” the line, if there is a function being called. And the
 arrow pointing up and to the right will “step out” of a function, if we
 are in one.</li>
  <li>So, we’ll use the curved arrow to run the next line, and see what changes after. After we type in our name, we’ll see that the <code class="highlighter-rouge">name</code> variable is also updated in the debugger.</li>
  <li>We can save lots of time in the future by investing a little bit now to learn how the debugger works!</li>
</ul>

<h2 id="strings"><a data-id="" href="#strings">Strings</a></h2>

<ul>
  <li>We’ve been using helpful functions from the CS50 Library, like <code class="highlighter-rouge">get_int</code> or <code class="highlighter-rouge">get_string</code>,
 to get input of a specific type from the user. These functions are 
generally tricky to write, because we want to prompt the user over and 
over again, if the input they give us isn’t actually valid.</li>
  <li>Today, we’ll look into the <code class="highlighter-rouge">string</code> type. As we learned last week, a string is just an array of characters, stored back-to-back. But let’s investigate what a <code class="highlighter-rouge">string</code> variable actually is.</li>
  <li>Let’s open <code class="highlighter-rouge">compare0.c</code>:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two integers
</span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"i: "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"j: "</span><span class="p">);</span>

    <span class="c1">// Compare integers
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>As expected, if we provide the same values for <code class="highlighter-rouge">i</code> and <code class="highlighter-rouge">j</code>, we see that they’re the same.</li>
    </ul>
  </li>
  <li>In <code class="highlighter-rouge">compare1.c</code>, we’ll try to do the same with strings:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings
</span>    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">t</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>Hmm, no matter what we type in for our strings, our program thinks they are different.</li>
    </ul>
  </li>
  <li>It turns out, <code class="highlighter-rouge">string</code> is not
 actually a data type in C. The word “string” is common in computer 
science, but there is no way to store strings in C. Instead, we defined 
that type in the CS50 Library.</li>
  <li>Recall that strings are just arrays of characters, so when we ran our <code class="highlighter-rouge">compare1</code> program, we got two strings as input from the user, and those might be stored in memory as the following:<br>
<img src="Lecture%203%20-%20CS50_files/strings.png" alt="&quot;Brian\0&quot; and &quot;Veronica\0&quot; in different grids">
    <ul>
      <li>Each character is in one byte, and somewhere we have bytes in memory containing the values for each of string.</li>
    </ul>
  </li>
  <li>It turns out, each byte in memory has a numeric location, or <em>address</em>. For example, the character <code class="highlighter-rouge">B</code> might have the address 100, and <code class="highlighter-rouge">V</code> might have ended up in <code class="highlighter-rouge">900</code> (depending on what parts of memory were available, or free):<br>
<img src="Lecture%203%20-%20CS50_files/strings_with_addresses.png" alt="&quot;Brian\0&quot; and &quot;Veronica\0&quot; in different grids, with each grid, or byte in memory, labelled">
    <ul>
      <li>Notice that, since each string is an array of characters, each
 character within the array has consecutive addresses, since they are 
stored next to each other in memory. But the strings themselves might 
have very different addresses.</li>
    </ul>
  </li>
  <li>So, <code class="highlighter-rouge">get_string</code> actually returns just the address of the first character of the string. (We can tell where it ends by looking for the <code class="highlighter-rouge">null</code> character, <code class="highlighter-rouge">\0</code>.) Now, we can infer that comparing two “strings” actually just compares two addresses (which will always be different, since <code class="highlighter-rouge">get_string</code> stores the input in a new place each time), even if the characters stored at those addresses are the same.</li>
  <li>Other data types in C, such as <code class="highlighter-rouge">int</code>s or <code class="highlighter-rouge">float</code>s,
 are generally passed and stored as their values, since they are always a
 fixed number of bytes. Strings, on the other hand, are passed as their 
addresses, since they could be really long.</li>
  <li>If we do want to compare two strings, it seems like what we need to do is compare each character one at a time:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</span>
<span class="n">bool</span> <span class="n">compare_strings</span><span class="p">(</span><span class="n">string</span> <span class="n">a</span><span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings
</span>    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Compare strings for equality
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">compare_strings</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">bool</span> <span class="nf">compare_strings</span><span class="p">(</span><span class="n">string</span> <span class="n">a</span><span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Compare strings' lengths
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">!=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Compare strings character by character
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Different
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Same
</span>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>We write a function called <code class="highlighter-rouge">compare_strings</code>, which takes in two strings as arguments, and return a <code class="highlighter-rouge">bool</code>, or Boolean expression.</li>
      <li>First, we compare the strings’ lengths, and <code class="highlighter-rouge">return false</code> if they are not the same. Then, we can check each character, and <code class="highlighter-rouge">return false</code> if we get to any that are different.</li>
      <li>We also need to remember to add the prototype, <code class="highlighter-rouge">bool compare_strings(string a, string b);</code> to the top.</li>
    </ul>
  </li>
  <li>A <code class="highlighter-rouge">string</code> is actually a synonym for a <code class="highlighter-rouge">char *</code>. The <code class="highlighter-rouge">*</code> in C (which also means multiplication, depending on the context), means that the data type is an address. So a <code class="highlighter-rouge">char *</code> is an address to a <code class="highlighter-rouge">char</code>. And such a variable type is called, more formally, a <em>pointer</em>.</li>
  <li>Now, we can replace <code class="highlighter-rouge">char *</code> where we’ve been using string:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</span>
<span class="n">bool</span> <span class="n">compare_strings</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings
</span>    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Compare strings for equality
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">compare_strings</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">bool</span> <span class="nf">compare_strings</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Compare strings' lengths
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">!=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Compare strings character by character
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Different
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Same
</span>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>It turns out, there’s a library function in <code class="highlighter-rouge">string.h</code>, written by others many years ago, called <code class="highlighter-rouge">strcmp</code>, which compares strings for us:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings
</span>    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Compare strings for equality
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>The return value for <code class="highlighter-rouge">strcmp</code>, based on looking at documentation like <a href="https://reference.cs50.net/">CS50 Reference</a>, will be <code class="highlighter-rouge">0</code> if the strings are equal, or some other value if they are different.</li>
    </ul>
  </li>
  <li>We should also be checking for other errors, that we haven’t paid attention to before.</li>
  <li><code class="highlighter-rouge">get_string</code> is supposed to return the address to the first byte of a string, but sometimes it may return <code class="highlighter-rouge">NULL</code>, an invalid address that indicates something went wrong. (And that address has the value of <code class="highlighter-rouge">0</code>, which is a special address that isn’t used to store anything.)</li>
  <li>To check for errors, we might do this:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string
</span>    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get another string
</span>    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Compare strings for equality
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>If, for some reason, <code class="highlighter-rouge">get_string</code> doesn’t return a valid address, we ourselves will return an exit code of <code class="highlighter-rouge">1</code>, to indicate some error has occurred. If we continued, we might see a <em>segmentation fault</em>, which means that we tried to access memory that we aren’t able to (such as at the <code class="highlighter-rouge">NULL</code> address).</li>
      <li>We can simplify the condition to just <code class="highlighter-rouge">if (!s)</code>, since “not <code class="highlighter-rouge">s</code>” will be “not 0” when <code class="highlighter-rouge">s</code> is <code class="highlighter-rouge">NULL</code>, which ultimately resolves to “true”.</li>
    </ul>
  </li>
  <li>Now, let’s try to copy a string:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string
</span>    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>

    <span class="c1">// Copy string's address
</span>    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>

    <span class="c1">// Capitalize first letter in string
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// Print string twice
</span>    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>We get a string <code class="highlighter-rouge">s</code>, and copy the value of <code class="highlighter-rouge">s</code> into <code class="highlighter-rouge">t</code>. Then, we capitalize the first letter in <code class="highlighter-rouge">t</code>.</li>
      <li>But when we run our program, we see that both <code class="highlighter-rouge">s</code> and <code class="highlighter-rouge">t</code> are now capitalized.</li>
      <li>Since we set <code class="highlighter-rouge">s</code> and <code class="highlighter-rouge">t</code> to the same values, they’re actually pointers to the same character, and so we capitalized the same character:<br>
<img src="Lecture%203%20-%20CS50_files/pointers.png" alt="s and t variables pointing to the same string"></li>
    </ul>
  </li>
  <li>To actually make a copy of a string, we have to do a little more work:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string
</span>    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Allocate memory for another string
</span>    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">((</span><span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">t</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Copy string into memory
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// Capitalize first letter in copy
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// Print strings
</span>    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>

    <span class="c1">// Free memory
</span>    <span class="n">free</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>We create a new variable, <code class="highlighter-rouge">t</code>, of the type <code class="highlighter-rouge">char *</code>, with <code class="highlighter-rouge">char *t</code>. Now, we want to point it to a new chunk of memory that’s large enough to store the copy of the string. With <code class="highlighter-rouge">malloc</code>,
 we can allocate some number of bytes in memory (that aren’t already 
used to store other values), and we pass in the number of bytes we’d 
like. We already know the length of <code class="highlighter-rouge">s</code>, so we add 1 to that for the terminating null character, and we multiply that by <code class="highlighter-rouge">sizeof(char)</code> (which gets us the number of bytes for each character) to be sure that we have enough memory. So, our final line of code is <code class="highlighter-rouge">char *t = malloc((strlen(s) + 1) * sizeof(char));</code>.</li>
      <li>Then, we copy each character, one at a time, and now we can capitalize just the first letter of <code class="highlighter-rouge">t</code>. And we use <code class="highlighter-rouge">i &lt;= n</code>, since we actually want to go up to one past <code class="highlighter-rouge">n</code>, to ensure we copy the terminating character in the string. Finally, after we’re done, we call <code class="highlighter-rouge">free(t)</code>,
 which tells our computer that those bytes are no longer useful to our 
program, and so those bytes in memory can be reused again.</li>
      <li>We can actually also use the <code class="highlighter-rouge">strcpy</code> library function, which we can learn about through reading documentation, to copy a string.</li>
    </ul>
  </li>
  <li>A <em>memory leak</em>  happens when we allocate more and more 
memory for our program to use, but we don’t free that memory. Then, our 
computer gets slower and slower (since it has to compensate for less and
 less memory).</li>
  <li>Let’s look at why it might be hard to get input from a user:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%i"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x: %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="highlighter-rouge">scanf</code> is a function that gets input from the user, according to a particular format. We pass in <code class="highlighter-rouge">%i</code> to indicate that we’re looking for an integer, and we use <code class="highlighter-rouge">&amp;x</code> to get the address of <code class="highlighter-rouge">x</code>, so <code class="highlighter-rouge">scanf</code> can put the value into the right place in memory.</li>
    </ul>
  </li>
  <li>But now let’s try to get a string:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>Since we didn’t allocate any memory for the actual bytes of the string, <code class="highlighter-rouge">scanf</code> had nowhere to store the input.</li>
    </ul>
  </li>
  <li>We can allocate some number of bytes as an array of characters:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>Now, we have 5 bytes in memory into which we can store input.</li>
      <li>Notice that we can pass in <code class="highlighter-rouge">s</code> as an address, since arrays can be treated like pointers to the first element in the array.</li>
      <li>But if we were to type in a much longer string, we eventually 
get a “segmentation fault”, where we tried to access a segment of memory
 we couldn’t or shouldn’t. It turns out that <code class="highlighter-rouge">scanf</code> doesn’t know how much memory is allocated, so it keeps writing to memory, starting at the address <code class="highlighter-rouge">s</code>, for as much input as is passed in, even though we might not have allocated as much. <code class="highlighter-rouge">get_string</code> handles this for us, and allocates memory as needed. (And if you’re super interested, the <a href="https://github.com/cs50/libcs50/blob/develop/src/cs50.c">source code</a> for the CS50 Library is available!)</li>
    </ul>
  </li>
</ul>

<h2 id="memory"><a data-id="" href="#memory">Memory</a></h2>

<ul>
  <li>To tie this all together, recall that we have physical chips of 
RAM in our computers, that store all the bytes we have. And each byte 
has an address. We can see this with <code class="highlighter-rouge">addresses.c</code>:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings
</span>    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Print strings' addresses
</span>    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>Here, we tell <code class="highlighter-rouge">printf</code> to treat <code class="highlighter-rouge">s</code> and <code class="highlighter-rouge">t</code> as pointers with <code class="highlighter-rouge">%p</code>, so we see addresses like <code class="highlighter-rouge">0x2331010</code> and <code class="highlighter-rouge">0x2331050</code>.</li>
    </ul>
  </li>
  <li>The values are super big (because there are lots of location in 
memory), and they’re usually noted in a system called hexadecimal. Like 
binary and decimal, hexadecimal is a way to represent numbers, and it 
has 16 possible values per digit, 0-9 and A-F. (It just happens that the
 addresses for <code class="highlighter-rouge">s</code> and <code class="highlighter-rouge">t</code> had no alphabetical characters.) And a value in hexadecimal will conventionally start with <code class="highlighter-rouge">0x</code>, to indicate that.</li>
  <li>Earlier, we saw <code class="highlighter-rouge">0x0</code> in the debugger panel for the <code class="highlighter-rouge">name</code> variable, and then a different value once we inputted a string, and that was the address of our string.</li>
  <li>We can look at an example of converting three bytes from decimal, to binary, and to hexadecimal:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     255         216         255
11111111    11011000    11111111
   f   f       d   8       f   f
</code></pre></div>    </div>
    <ul>
      <li>Since each digit in hexadecimal has 16 possible values, that 
maps to 4 binary digits, and so each byte can be expressed as 2 
hexadecimal digits, like <code class="highlighter-rouge">0xff</code> and <code class="highlighter-rouge">0xd8</code>. Four <code class="highlighter-rouge">1</code>s in binary is 15 in decimal, and <code class="highlighter-rouge">f</code> in hexadecimal.</li>
    </ul>
  </li>
  <li>We have two drinks, milk and orange juice, each of which is in a 
cup. We want to swap the drinks between the two cups, but we can’t do 
that without a third cup to pour one of the drink into first.</li>
  <li>Now, let’s say we wanted to swap the values of two integers.
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>With a third variable to use as temporary storage space, we can do this pretty easily.</li>
    </ul>
  </li>
  <li>But, if we tried to use that function in a program, we don’t see any changes:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>It turns out that the <code class="highlighter-rouge">swap</code> function gets its own variables, <code class="highlighter-rouge">a</code> and <code class="highlighter-rouge">b</code> when they are passed in, that are copies of <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>, and so changing those values don’t change <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code> in the <code class="highlighter-rouge">main</code> function.</li>
    </ul>
  </li>
  <li>By passing in the address of <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>, our <code class="highlighter-rouge">swap</code> function can actually work:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
    <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
    <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>The addresses of <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code> are passed in from <code class="highlighter-rouge">main</code> to <code class="highlighter-rouge">swap</code>, and we use the <code class="highlighter-rouge">*a</code> syntax to <em>follow</em> (or <em>dereference</em>) a pointer and get the value stored there. We save that to <code class="highlighter-rouge">tmp</code>, and then take the <em>value</em> at <code class="highlighter-rouge">b</code> and store that as the <em>value</em> of <code class="highlighter-rouge">a</code>. Finally, we store the value of <code class="highlighter-rouge">tmp</code> as the value of <code class="highlighter-rouge">b</code>, and we’re done.</li>
      <li>We’ll click to the left of the line <code class="highlighter-rouge">int x = 1</code> to set a breakpoint with the red icon, and run <code class="highlighter-rouge">debug50 ./swap</code> again, to step through our program one line at a time. We can use the “step into” button now, to go into our <code class="highlighter-rouge">swap</code> function and see how it works.</li>
    </ul>
  </li>
</ul>

<h2 id="memory-layout"><a data-id="" href="#memory-layout">Memory layout</a></h2>

<ul>
  <li>Within our computer’s memory, the different types of data that 
need to be stored for our program are organized into different sections:<br>
<img src="Lecture%203%20-%20CS50_files/memory_layout.png" alt="Grid with sections, from top to bottom: text, initialized data, uninitialized data, heap (with arrow pointing downward), stack (with arrow pointing upward), and environment variables">
    <ul>
      <li>The <em>text</em> section is our compiled program’s binary code. When we run our program, that code is loaded into the “top” of memory.</li>
      <li>The <em>heap</em> section is an open area where <code class="highlighter-rouge">malloc</code> can get free memory from, for our program to use.</li>
      <li>The <em>stack</em> section is used by functions in our program as they are called. For example, our <code class="highlighter-rouge">main</code> function is at the very bottom of the stack, and has the variables <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>. The <code class="highlighter-rouge">swap</code> function, when it’s called, has some memory that’s on top of <code class="highlighter-rouge">main</code>, with the variables <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">b</code>, and <code class="highlighter-rouge">tmp</code>:<br>
<img src="Lecture%203%20-%20CS50_files/stack.png" alt="Stack section with swap (a, b, tmp) above main (1, 2)">
        <ul>
          <li>Once the function <code class="highlighter-rouge">swap</code>
 returns, the memory it was using is freed for the next function call, 
and we lose anything we did, other than the return values.</li>
          <li>So by passing in the addresses of <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code> from <code class="highlighter-rouge">main</code> to <code class="highlighter-rouge">swap</code>, we could actually change the values of <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>.</li>
        </ul>
      </li>
      <li>Global variables are in the initialized data and uninitialized
 data sections, and environment variables from the command-line are also
 stored in a section.</li>
    </ul>
  </li>
  <li>Let’s look at a buggy section of code:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>

    <span class="n">x</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>

    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>

    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>

    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>Here, we declare two pointers called <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>. We allocate memory for an integer for <code class="highlighter-rouge">x</code>, but not <code class="highlighter-rouge">y</code>, so trying to store the value <code class="highlighter-rouge">13</code> into <code class="highlighter-rouge">*y</code> might lead to a segmentation fault.</li>
      <li>But if we set <code class="highlighter-rouge">y</code> to be the same as <code class="highlighter-rouge">x</code>, pointing to the same address, we can successfully store the value <code class="highlighter-rouge">13</code> to that location.</li>
    </ul>
  </li>
  <li>We watch another clip, <a href="https://www.youtube.com/watch?v=_d0jFalGxnQ">Pointer Fun with Binky</a>.</li>
  <li>We might have used the website <a href="http://stackoverflow.com/">StackOverflow</a>,
 a Q&amp;A site commonly used for programming questions. Now, we can 
understand that the name of the site comes from a reference to the stack
 overflowing, or having too many function calls to fit in our computer’s
 memory.</li>
</ul>

<h2 id="structs"><a data-id="" href="#structs">Structs</a></h2>

<ul>
  <li>We can create variables of our own type with a concept called structs.</li>
  <li>For example, if we wanted to store both names and dorms of individual students, we might have arrays for each:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Space for students
</span>    <span class="kt">int</span> <span class="n">enrollment</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"Enrollment: "</span><span class="p">);</span>
    <span class="n">string</span> <span class="n">names</span><span class="p">[</span><span class="n">enrollment</span><span class="p">];</span>
    <span class="n">string</span> <span class="n">dorms</span><span class="p">[</span><span class="n">enrollment</span><span class="p">];</span>

    <span class="c1">// Prompt for students' names and dorms
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enrollment</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Name: "</span><span class="p">);</span>
        <span class="n">dorms</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Dorm: "</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Print students' names and dorms
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enrollment</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s is in %s.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dorms</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>But we might want to start having other pieces of data, and we 
have to make sure that all the arrays are the right length, and have the
 data for the same person at the same index. and so on. Instead, we can 
use structs, with a <code class="highlighter-rouge">struct.h</code> file containing:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">dorm</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">student</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>And a <code class="highlighter-rouge">struct.c</code> file containing:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cs50.h&gt;
#include &lt;stdio.h&gt;
</span>
<span class="cp">#include "struct.h"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Space for students
</span>    <span class="kt">int</span> <span class="n">enrollment</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"Enrollment: "</span><span class="p">);</span>
    <span class="n">student</span> <span class="n">students</span><span class="p">[</span><span class="n">enrollment</span><span class="p">];</span>

    <span class="c1">// Prompt for students' names and dorms
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enrollment</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">students</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Name: "</span><span class="p">);</span>
        <span class="n">students</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">dorm</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Dorm: "</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Print students' names and dorms
</span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enrollment</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s is in %s.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">students</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">,</span> <span class="n">students</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">dorm</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>Now, a <code class="highlighter-rouge">student</code> is our own variable type, that itself contains two variables, <code class="highlighter-rouge">name</code> and <code class="highlighter-rouge">dorm</code>, that we can access with <code class="highlighter-rouge">.name</code> and <code class="highlighter-rouge">.dorm</code> later on.</li>
    </ul>
  </li>
  <li>We can even open and save files with a snippet of code like:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">FILE</span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"students.csv"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">file</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enrollment</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s">"%s,%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">students</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">,</span> <span class="n">students</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">dorm</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>This is just a sneak preview of what we’ll learn to use in the next problem set!</li>
    </ul>
  </li>
</ul>

<h2 id="enhance-1"><a data-id="" href="#enhance-1">Enhance?</a></h2>

<ul>
  <li>Now, if we try to zoom in on an image, we’ll eventually see the 
pixels that it’s made of. But since images are represented as a finite 
number of bytes, we can’t possibly see details that aren’t already 
captured.</li>
  <li>Images can be represented as a <em>bitmap</em>, or map of bits:<br>
<img src="Lecture%203%20-%20CS50_files/bitmap.png" alt="mapping of bits in a grid to a smiley face">
    <ul>
      <li>Each <code class="highlighter-rouge">1</code> maps to a black pixel, and a <code class="highlighter-rouge">0</code> to a white pixel.</li>
      <li>An image with color will use more than one bit per pixel.</li>
    </ul>
  </li>
  <li>And an image file will also include special data values, at the 
beginning of the file, so that programs can open them correctly. In the 
problem set, we’ll learn about one such image file format, <code class="highlighter-rouge">.bmp</code>, for bitmaps. And we’ll learn to tweak images digitally, resizing or filtering them as we’d like.</li>
  <li>We end on a clip of a realistic example from the TV show Futurama, <a href="https://www.youtube.com/watch?v=17MctJPzR8w">Let’s Enhance</a>.</li>
</ul>


                </main>

            </div>

        </div>

    


</body></html>